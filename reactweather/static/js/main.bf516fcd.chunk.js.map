{"version":3,"sources":["assets/images/bg.png","modules/componets/Titles.js","modules/componets/Weather.js","modules/common/Loader.js","modules/componets/Form.js","config.js","modules/container/WeatherContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Titles","react_default","a","createElement","Container","bg","Bg","Title","SubTitle","Styled","div","_templateObject","props","concat","h1","_templateObject2","_templateObject3","Weather","_ref","city","country","temperature","humidity","description","Fragment","className","Loader","fullscreen","small","large","color","Wrapper","react_spinners","sizeUnit","size","loading","styled","Loader_templateObject","Form","getWeather","isLoading","_useState","useState","_useState2","Object","slicedToArray","cityName","setCityName","_useState3","_useState4","countryName","setountryName","type","name","value","placeholder","onChange","e","target","onClick","common_Loader","API_URL","WeatherContainer","setIsLoading","setCity","_useState5","_useState6","setCountry","_useState7","_useState8","setTemperature","_useState9","_useState10","setHumidity","_useState11","_useState12","setDescription","useEffect","navigator","geolocation","getCurrentPosition","success","pos","lat","coords","latitude","lng","longitude","api","callAPIAfterFiveMinute","setInterval","axios","get","then","res","data","sys","main","temp","weather","catch","err","toast","error","WeatherContainer_Container","InnerContainer","componets_Titles","WeatherWrapper","componets_Form","componets_Weather","WeatherContainer_templateObject","WeatherContainer_templateObject2","WeatherContainer_templateObject3","App","react_toastify","container_WeatherContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf516fcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.d6dac1c0.png\";","import React from \"react\";\r\nimport Styled from \"styled-components\";\r\nimport Bg from \"../../assets/images/bg.png\";\r\n\r\nconst Titles = () => {\r\n  return (\r\n    <Container bg={Bg}>\r\n      <Title>Today's Weather</Title>\r\n      <SubTitle>Find temperature, humidity and more...</SubTitle>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Titles;\r\n\r\nconst Container = Styled.div`\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40%;\r\n  height: 100%;\r\n  background: ${props => (props.bg ? `url(${props.bg})` : null)};\r\n  background-repeat: no-repeat;\r\n  background-size: 100% 100%;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 3rem 0;\r\n  }\r\n\r\n  @media (max-width: 448px) and (min-width: 320px) {\r\n    padding: 1rem 0;\r\n  }\r\n\r\n`;\r\n\r\nconst Title = Styled.h1`\r\n  margin: 0 0 2rem;\r\n  font-weight: 700;\r\n  font-size: 3.5rem;\r\n  color: #fff;\r\n  letter-spacing: .2rem;\r\n\r\n  @media (max-width: 991px) {\r\n    font-size: 2.8rem;\r\n    margin: 0 0 1.5rem;\r\n  }\r\n`;\r\n\r\nconst SubTitle = Styled.p`\r\n  margin: 0 0 1.5rem;\r\n  color: #fff;\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  @media (max-width: 991px) {\r\n    font-size: 1.4rem;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../styles/weather.scss\";\r\n\r\nconst Weather = ({ city, country, temperature, humidity, description }) => {\r\n  return (\r\n    <>\r\n      <div className=\"weather__info\">\r\n        <p className=\"weather__key\">\r\n          City:\r\n          <span className=\"weather__value\">{city ? city : \"N/A\"}</span>\r\n        </p>\r\n        <p className=\"weather__key\">\r\n          Country:\r\n          <span className=\"weather__value\">{country ? country : \"N/A\"}</span>\r\n        </p>\r\n        <p className=\"weather__key\">\r\n          Temperature:\r\n          <span className=\"weather__value\">\r\n            {temperature ? temperature : \"N/A\"}\r\n          </span>\r\n        </p>\r\n        <p className=\"weather__key\">\r\n          Humidity:\r\n          <span className=\"weather__value\">{humidity ? humidity : \"N/A\"}</span>\r\n        </p>\r\n        <p className=\"weather__key\">\r\n          Weather forecast:\r\n          <span className=\"weather__value\">\r\n            {description ? description : \"N/A\"}\r\n          </span>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nWeather.propTypes = {\r\n  city: PropTypes.string,\r\n  country: PropTypes.string,\r\n  temperature: PropTypes.number,\r\n  humidity: PropTypes.number,\r\n  description: PropTypes.string\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nconst Loader = ({ fullscreen, small, large, color }) => {\r\n  if (fullscreen) {\r\n    return (\r\n      <Wrapper>\r\n        <ClipLoader\r\n          sizeUnit={\"px\"}\r\n          size={40}\r\n          color={color || \"#0f9aee\"}\r\n          loading={true}\r\n        />\r\n      </Wrapper>\r\n    );\r\n  }\r\n  if (small)\r\n    return (\r\n      <ClipLoader\r\n        sizeUnit={\"px\"}\r\n        size={20}\r\n        color={color || \"#0f9aee\"}\r\n        loading={true}\r\n      />\r\n    );\r\n  if (large) {\r\n    return (\r\n      <ClipLoader\r\n        sizeUnit={\"px\"}\r\n        size={80}\r\n        color={color || \"#0f9aee\"}\r\n        loading={true}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ClipLoader\r\n      sizeUnit={\"px\"}\r\n      size={40}\r\n      color={color || \"#0f9aee\"}\r\n      loading={true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  min-height: calc(100vh - 18rem);\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Loader from \"../common/Loader\";\r\n\r\nconst Form = ({ getWeather, isLoading }) => {\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const [countryName, setountryName] = useState(\"\");\r\n\r\n  const hanldeGetWeather = () => {\r\n    getWeather({ cityName, countryName });\r\n    setCityName(\"\");\r\n    setountryName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"text\"\r\n        name=\"city\"\r\n        value={cityName}\r\n        placeholder=\"City name...\"\r\n        onChange={e => setCityName(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"country\"\r\n        value={countryName}\r\n        placeholder=\"Country name...\"\r\n        onChange={e => setountryName(e.target.value)}\r\n      />\r\n      <button onClick={hanldeGetWeather} className=\"btn\" type=\"submit\">\r\n        {isLoading ? <Loader small color=\"#fff\" /> : \"Search\"}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  getWeather: PropTypes.func,\r\n  isLoading: PropTypes.bool\r\n};\r\n\r\nexport default Form;\r\n","export const API_URL = \"76abe5b9b0be9f78c04a1a3d1f2fd577\";\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport Titles from \"../componets/Titles\";\r\nimport Weather from \"../componets/Weather\";\r\nimport Form from \"../componets/Form\";\r\nimport { API_URL } from \"../../config\";\r\n\r\nconst WeatherContainer = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [humidity, setHumidity] = useState(null);\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(success);\r\n  }, []);\r\n\r\n  const success = pos => {\r\n    var lat = pos.coords.latitude;\r\n    var lng = pos.coords.longitude;\r\n\r\n    if (lat && lng) {\r\n      let api = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${API_URL}&units=metric`;\r\n\r\n      callAPIAfterFiveMinute(api);\r\n\r\n      setInterval(() => {\r\n        callAPIAfterFiveMinute(api);\r\n      }, 300000);\r\n    }\r\n  };\r\n\r\n  const callAPIAfterFiveMinute = api => {\r\n    axios\r\n      .get(api)\r\n      .then(res => {\r\n        setCity(res.data.name);\r\n        setCountry(res.data.sys.country);\r\n        setTemperature(res.data.main.temp);\r\n        setHumidity(res.data.main.humidity);\r\n        setDescription(res.data.weather[0].description);\r\n      })\r\n      .catch(err => {\r\n        toast.error(\"Location not found!\");\r\n      });\r\n  };\r\n\r\n  const handleWeather = ({ cityName, countryName }) => {\r\n    if (!cityName) {\r\n      toast.error(\"City and Country field should not be empty!\");\r\n      return;\r\n    }\r\n    if (!countryName) {\r\n      toast.error(\"City and Country field should not be empty!\");\r\n      return;\r\n    }\r\n\r\n    let api = `https://api.openweathermap.org/data/2.5/weather?q=${cityName},${countryName}&appid=${API_URL}&units=metric`;\r\n    setIsLoading(true);\r\n\r\n    axios\r\n      .get(api)\r\n      .then(res => {\r\n        setCity(res.data.name);\r\n        setCountry(res.data.sys.country);\r\n        setTemperature(res.data.main.temp);\r\n        setHumidity(res.data.main.humidity);\r\n        setDescription(res.data.weather[0].description);\r\n\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => {\r\n        toast.error(\"City not found!\");\r\n\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <InnerContainer>\r\n        <Titles />\r\n        <WeatherWrapper>\r\n          <Form getWeather={handleWeather} isLoading={isLoading} />\r\n          <Weather\r\n            city={city}\r\n            country={country}\r\n            temperature={temperature}\r\n            humidity={humidity}\r\n            description={description}\r\n          />\r\n        </WeatherWrapper>\r\n      </InnerContainer>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WeatherContainer;\r\n\r\nconst Container = Styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n\r\n   \r\n`;\r\n\r\nconst InnerContainer = Styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 90vh;\r\n    width: 90vw;\r\n\r\n    @media (max-width: 768px) {\r\n        flex-flow: column wrap;\r\n        height: auto;\r\n        max-height: 90vh;\r\n    }\r\n`;\r\n\r\nconst WeatherWrapper = Styled.div`\r\n    width: 60%;\r\n    height: 100%;\r\n    background-color: #2c3e50;\r\n    padding: 3rem;\r\n\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n        padding: 1rem;\r\n    }\r\n`;\r\n","import React from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport WeatherContainer from \"./modules/container/WeatherContainer\";\nimport \"./style.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n      <WeatherContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}