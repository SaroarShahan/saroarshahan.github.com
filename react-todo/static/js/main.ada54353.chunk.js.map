{"version":3,"sources":["components/Todos.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","onTodoDelete","react_default","a","createElement","className","length","map","todo","key","id","content","onClick","TodoForm","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","onTodo","onSubmit","this","type","name","placeholder","onChange","Component","App","getTodo","todosItem","JSON","parse","handleTodoDelete","filter","localStorage","setItem","stringify","handleTodo","Object","toConsumableArray","concat","Math","random","getItem","components_TodoForm","components_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MA0BeA,EAxBD,SAAAC,GAA6B,IAA1BC,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,aACtB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXL,EAAMM,OACLN,EAAMO,IAAI,SAAAC,GAAI,OACZN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,EAAKE,GAAIL,UAAU,mBACzBG,EAAKG,QACNT,EAAAC,EAAAC,cAAA,QACEC,UAAU,YACVO,QAAS,kBAAMX,EAAaO,EAAKE,UAKvCR,EAAAC,EAAAC,cAAA,iDCgBGS,6MA/BbC,MAAQ,CACNH,QAAS,MAGXI,aAAe,SAAAC,GACbC,EAAKC,SAAS,CAAEP,QAASK,EAAEG,OAAOC,WAGpCC,aAAe,SAAAL,GACbA,EAAEM,iBACFL,EAAKM,MAAMC,OAAOP,EAAKH,OACvBG,EAAKC,SAAS,CAAEP,QAAS,8EAIzB,OACET,EAAAC,EAAAC,cAAA,QAAMqB,SAAUC,KAAKL,aAAchB,UAAU,YAC3CH,EAAAC,EAAAC,cAAA,SACEuB,KAAK,OACLP,MAAOM,KAAKZ,MAAMH,QAClBiB,KAAK,OACLvB,UAAU,YACVwB,YAAY,mBACZC,SAAUJ,KAAKX,eAEjBb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAlB,oBA1Be0B,aC0CRC,6MAvCblB,MAAQ,CACNd,MAAO,MAOTiC,QAAU,SAAAC,GACR,IAAMlC,EAAQmC,KAAKC,MAAMF,GAEzBjB,EAAKC,SAAS,CAAElB,aAGlBqC,iBAAmB,SAAA3B,GACjB,IAAMV,EAAQiB,EAAKH,MAAMd,MAAMsC,OAAO,SAAA9B,GAAI,OAAIA,EAAKE,KAAOA,IAC1DO,EAAKC,SAAS,CAAElB,UAEhBuC,aAAaC,QAAQ,QAASL,KAAKM,UAAUzC,OAG/C0C,WAAa,SAAAlC,GACX,IAAMR,EAAK2C,OAAAC,EAAA,EAAAD,CAAO1B,EAAKH,MAAMd,OAAlB6C,OAAA,CAAyBrC,IACpCA,EAAKE,GAAKoC,KAAKC,SAEf9B,EAAKC,SAAS,CAAElB,UAChBuC,aAAaC,QAAQ,QAASL,KAAKM,UAAUzC,wFArB7C0B,KAAKO,QAAQM,aAAaS,QAAQ,2CAyBlC,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC6C,EAAD,CAAUzB,OAAQE,KAAKgB,aACvBxC,EAAAC,EAAAC,cAAC8C,EAAD,CAAOlD,MAAO0B,KAAKZ,MAAMd,MAAOC,aAAcyB,KAAKW,2BAlCzCN,aCQEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ada54353.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Todos = ({ todos, onTodoDelete }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"todosWrap\">\r\n        <ul className=\"todosList\">\r\n          {todos.length ? (\r\n            todos.map(todo => (\r\n              <li key={todo.id} className=\"todosList__item\">\r\n                {todo.content}\r\n                <span\r\n                  className=\"close-btn\"\r\n                  onClick={() => onTodoDelete(todo.id)}\r\n                />\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <p>There is no todo's left for you!</p>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React, { Component } from \"react\";\r\n\r\nclass TodoForm extends Component {\r\n  state = {\r\n    content: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ content: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onTodo(this.state);\r\n    this.setState({ content: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"todoForm\">\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.content}\r\n          name=\"todo\"\r\n          className=\"todoField\"\r\n          placeholder=\"Add todo here...\"\r\n          onChange={this.handleChange}\r\n        />\r\n        <button className=\"add-btn\">Add todo</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from \"react\";\nimport Todos from \"./components/Todos\";\nimport TodoForm from \"./components/TodoForm\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  componentDidMount() {\n    this.getTodo(localStorage.getItem(\"todos\"));\n  }\n\n  getTodo = todosItem => {\n    const todos = JSON.parse(todosItem);\n\n    this.setState({ todos });\n  };\n\n  handleTodoDelete = id => {\n    const todos = this.state.todos.filter(todo => todo.id !== id);\n    this.setState({ todos });\n\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  handleTodo = todo => {\n    const todos = [...this.state.todos, todo];\n    todo.id = Math.random();\n\n    this.setState({ todos });\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <TodoForm onTodo={this.handleTodo} />\n        <Todos todos={this.state.todos} onTodoDelete={this.handleTodoDelete} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}